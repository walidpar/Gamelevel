//  Main GSC File: -----------------------------------------------------------------------------------------------------------------------


#using scripts\zm\ugxmods_timedgp;

#using scripts\zm\ugxmods_buyable_ending;

#using scripts\codescripts\struct;

#using scripts\shared\array_shared;
#using scripts\shared\callbacks_shared;
#using scripts\shared\clientfield_shared;
#using scripts\shared\compass;
#using scripts\shared\exploder_shared;
#using scripts\shared\flag_shared;
#using scripts\shared\laststand_shared;
#using scripts\shared\math_shared;
#using scripts\shared\scene_shared;
#using scripts\shared\util_shared;

#insert scripts\shared\shared.gsh;
#insert scripts\shared\version.gsh;

#insert scripts\zm\_zm_utility.gsh;

#using scripts\zm\_load;
#using scripts\zm\_zm;
#using scripts\zm\_zm_audio;
#using scripts\zm\_zm_powerups;
#using scripts\zm\_zm_utility;
#using scripts\zm\_zm_weapons;
#using scripts\zm\_zm_zonemgr;

#using scripts\shared\ai\zombie_utility;

//Perks
#using scripts\zm\_zm_pack_a_punch;
#using scripts\zm\_zm_pack_a_punch_util;
#using scripts\zm\_zm_perk_additionalprimaryweapon;
#using scripts\zm\_zm_perk_doubletap2;
#using scripts\zm\_zm_perk_deadshot;
#using scripts\zm\_zm_perk_juggernaut;
#using scripts\zm\_zm_perk_quick_revive;
#using scripts\zm\_zm_perk_sleight_of_hand;
#using scripts\zm\_zm_perk_staminup;
#using scripts\zm\_zm_perk_widows_wine;
#using scripts\zm\logical\perks\_zm_perk_ffyl;
#using scripts\zm\logical\perks\_zm_perk_icu;
#using scripts\zm\logical\perks\_zm_perk_tactiquilla;
#using scripts\zm\logical\perks\_zm_perk_milk;



//Powerups
#using scripts\zm\_zm_powerup_double_points;
#using scripts\zm\_zm_powerup_carpenter;
#using scripts\zm\_zm_powerup_fire_sale;
#using scripts\zm\_zm_powerup_free_perk;
#using scripts\zm\_zm_powerup_full_ammo;
#using scripts\zm\_zm_powerup_insta_kill;
#using scripts\zm\_zm_powerup_nuke;
#using scripts\zm\_zm_powerup_weapon_minigun;


//Traps
#using scripts\zm\_zm_trap_electric;

#using scripts\zm\zm_usermap;

#using scripts\sg4y\flashlight\zm_flashlight;

//*****************************************************************************
// MAIN
//*****************************************************************************

function main()
{

	level thread new_zombie_speed();

	zm_usermap::main();

	level.player_starting_points = 70000;

	level.perk_purchase_limit = 20;
	
	level._zombie_custom_add_weapons =&custom_add_weapons;
	
	//Setup the levels Zombie Zone Volumes
	level.zones = [];
	level.zone_manager_init_func =&usermap_test_zone_init;
	init_zones[0] = "start_zone";
	level thread zm_zonemgr::manage_zones( init_zones );

	level.pathdist_type = PATHDIST_ORIGINAL;
}

function usermap_test_zone_init()
{

	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_2", "activate_zone_2" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_3", "activate_zone_3" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_4", "activate_zone_4" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_5", "activate_zone_5" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_6", "activate_zone_6" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_7", "activate_zone_7" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_8", "activate_zone_8" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_9", "activate_zone_9" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_10", "activate_zone_10" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_11", "activate_zone_11" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_12", "activate_zone_12" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_13", "activate_zone_13" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_14", "activate_zone_14" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_15", "activate_zone_15" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_16", "activate_zone_16" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_17", "activate_zone_17" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_18", "activate_zone_18" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_19", "activate_zone_19" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_20", "activate_zone_20" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_21", "activate_zone_21" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_22", "activate_zone_22" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_23", "activate_zone_23" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_24", "activate_zone_24" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_25", "activate_zone_25" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_26", "activate_zone_26" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_27", "activate_zone_27" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_28", "activate_zone_28" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_29", "activate_zone_29" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_30", "activate_zone_30" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_31", "activate_zone_31" );
	zm_zonemgr::add_adjacent_zone( "start_zone", "zone_32", "activate_zone_32" );
	
	level flag::init( "always_on" );
	level flag::set( "always_on" );


}	

function custom_add_weapons()
{
	zm_weapons::load_weapon_spec_from_table("gamedata/weapons/zm/zm_levelcommon_weapons.csv", 1);
}

function new_zombie_speed()
{
	level flag::wait_till( "initial_blackscreen_passed" ); 
	zombie_utility::set_zombie_var( "zombie_move_speed_multiplier", 	  41,	false );	//	Multiply by the round number to give the base speed value.  0-40 = walk, 41-70 = run, 71+ = sprint
	zombie_utility::set_zombie_var( "zombie_move_speed_multiplier_easy",  41,	false );	//	Multiply by the round number to give the base speed value.  0-40 = walk, 41-70 = run, 71+ = sprint
	level.zombie_move_speed			= level.round_number * level.zombie_vars["zombie_move_speed_multiplier"]; 
}

// Main CSC File:-------------------------------------------------------------------------------------------------------------------------------------------------

#using scripts\codescripts\struct;
#using scripts\shared\audio_shared;
#using scripts\shared\callbacks_shared;
#using scripts\shared\clientfield_shared;
#using scripts\shared\exploder_shared;
#using scripts\shared\scene_shared;
#using scripts\shared\util_shared;

#insert scripts\shared\shared.gsh;
#insert scripts\shared\version.gsh;

#using scripts\zm\_load;
#using scripts\zm\_zm_weapons;

//Perks
#using scripts\zm\_zm_pack_a_punch;
#using scripts\zm\_zm_perk_additionalprimaryweapon;
#using scripts\zm\_zm_perk_doubletap2;
#using scripts\zm\_zm_perk_deadshot;
#using scripts\zm\_zm_perk_juggernaut;
#using scripts\zm\_zm_perk_quick_revive;
#using scripts\zm\_zm_perk_sleight_of_hand;
#using scripts\zm\_zm_perk_staminup;
#using scripts\zm\_zm_perk_widows_wine;
#using scripts\zm\logical\perks\_zm_perk_ffyl;
#using scripts\zm\logical\perks\_zm_perk_icu;
#using scripts\zm\logical\perks\_zm_perk_tactiquilla;
#using scripts\zm\logical\perks\_zm_perk_milk;





//Powerups
#using scripts\zm\_zm_powerup_double_points;
#using scripts\zm\_zm_powerup_carpenter;
#using scripts\zm\_zm_powerup_fire_sale;
#using scripts\zm\_zm_powerup_free_perk;
#using scripts\zm\_zm_powerup_full_ammo;
#using scripts\zm\_zm_powerup_insta_kill;
#using scripts\zm\_zm_powerup_nuke;
#using scripts\zm\_zm_powerup_weapon_minigun;


//Traps
#using scripts\zm\_zm_trap_electric;

#using scripts\zm\zm_usermap;

#using scripts\sg4y\flashlight\zm_flashlight;

function main()
{
	zm_usermap::main();



	include_weapons();
	
	util::waitforclient( 0 );
}

function include_weapons()
{
	zm_weapons::load_weapon_spec_from_table("gamedata/weapons/zm/zm_levelcommon_weapons.csv", 1);
}

// -----------------------------------------------------------------------------------------------------------------------------------------

// Timed Gameplay GSC File: 
/*
	Created by Andy King (treminaor) for UGX-Mods.com. Â© UGX-Mods 2016
	Please include credit if you use this script and do not distribute edited versions of it without my permission.
	Contact: twitter.com/treminaor
	Instructions: https://confluence.ugx-mods.com/display/UGXMODS/BO3+%7C+Adding+Timed+Gameplay+to+Zombiemode

	Version: 1.0 10/13/2016 8:59PM
*/

#using scripts\shared\flag_shared;

#using scripts\zm\_zm_audio;
#using scripts\zm\_zm_utility;

#using scripts\shared\ai\zombie_death;
#using scripts\shared\ai\zombie_utility;

#insert scripts\shared\shared.gsh;

//default round_wait func but without a check for zero zombies alive, which allows for continuous spawning
function round_wait_override()
{
	level endon("restart_round");
	level endon( "kill_round" );

	wait( 1 );

	while( 1 )
	{
		should_wait = ( level.zombie_total > 0 || level.intermission );	
		if( !should_wait )
		{
			return;
		}			
			
		if( level flag::get( "end_round_wait" ) )
		{
			return;
		}
		wait( 1.0 );
	}
}

function autoexec timed_gameplay() //If you want to call this yourself based on some user input or whatever, remove 'autoexec' and call this function externally from somewhere else.
{
	level.round_wait_func = &round_wait_override; //this has to happen before zm::round_start() runs!
	level.custom_game_over_hud_elem = &timed_game_over;

	wait 0.5; 

	level.next_dog_round = 9999; //cheap way to disable dogs after zm_usermap::main() runs.
	level.zombie_vars["zombie_between_round_time"] = 0; //remove the delay at the end of each round 
	level.zombie_round_start_delay = 0; //remove the delay before zombies start to spawn

	level.ugxm_settings = [];
	if(isDefined(level.tgTimer)) level.tgTimer Destroy();
	level.tgTimer = NewHudElem();

	level.isTimedGameplay = true;

	if(!isDefined(level.ugxm_settings["timed_hud_offset"]))
		level.ugxm_settings["timed_hud_offset"] = 0;

	level.tgTimerTime = SpawnStruct();

	level.tgTimerTime.days = 0;
	level.tgTimerTime.hours = 0;
	level.tgTimerTime.minutes = 0;
	level.tgTimerTime.seconds = 0;
	level.tgTimerTime.toalSec = 0;
	
	level.tgTimer.foreground = false; 
	level.tgTimer.sort = 2; 
	level.tgTimer.hidewheninmenu = false; 

	level.tgTimer.fontScale = 1;
	level.tgTimer.alignX = "left"; 
	level.tgTimer.alignY = "bottom";
	level.tgTimer.horzAlign = "left";  
	level.tgTimer.vertAlign = "bottom";
	level.tgTimer.x = 60; 
	level.tgTimer.y = - 65 + level.ugxm_settings["timed_hud_offset"]; 
	
	level.tgTimer.alpha = 0;

	level flag::wait_till("initial_blackscreen_passed");
	
	level.tgTimer SetTimerUp(0);
	
	thread timed_gameplay_bg_counter();
	level.tgTimer.alpha = 1;
}
function timed_gameplay_bg_counter()
{
	level endon("end_game");
		
	while(1)
	{	
		if(level.tgTimerTime.seconds >= 59) 
		{
			level.tgTimerTime.seconds = 0;
			level.tgTimerTime.minutes ++;
		}
		
		if(level.tgTimerTime.minutes >= 59) 
		{
			level.tgTimerTime.minutes = 0;
			level.tgTimerTime.hours ++;
		}
		
		if(level.tgTimerTime.hours >= 23)
		{
			level.tgTimerTime.hours = 0;
			level.tgTimerTime.days ++;
		}
		
		level.tgTimerTime.seconds ++;
		level.tgTimerTime.toalSec ++;

		wait 1;

	}
}

function timed_game_over(player, game_over, survived)
{
	level.tgTimer Destroy();

	new_survived = NewClientHudElem( player );

	game_over.alignX = "center";
	game_over.alignY = "middle";
	game_over.horzAlign = "center";
	game_over.vertAlign = "middle";
	game_over.y -= 130;
	game_over.foreground = true;
	game_over.fontScale = 3;
	game_over.alpha = 0;
	game_over.color = ( 1.0, 1.0, 1.0 );
	game_over.hidewheninmenu = true;
	game_over SetText( "Game Over!" );

	game_over FadeOverTime( 1 );
	game_over.alpha = 1;
	if ( player isSplitScreen() )
	{
		game_over.fontScale = 2;
		game_over.y += 40;
	}

	secondsTxt = "";
	minsTxt = "";
	hoursTxt = "";
	daysTxt = "";
	
	if(level.tgTimerTime.seconds > 0)
	{
		secondsTxt = level.tgTimerTime.seconds + "s ";
	}
	if(level.tgTimerTime.minutes > 0)
	{
		minsTxt = level.tgTimerTime.minutes + "m ";
	}
	if(level.tgTimerTime.hours > 0)
	{
		hoursTxt = level.tgTimerTime.hours + "h ";
	}
	if(level.tgTimerTime.days > 0)
	{
		daysTxt = level.tgTimerTime.days + "d ";
	}
	if(daysTxt + hoursTxt + minsTxt + secondsTxt == "")
	{
		secondsTxt = "0s";
	}

	new_survived.alignX = "center";
	new_survived.alignY = "middle";
	new_survived.horzAlign = "center";
	new_survived.vertAlign = "middle";
	new_survived.y -= 100;
	new_survived.foreground = true;
	new_survived.fontScale = 2;
	new_survived.alpha = 0;
	new_survived.color = ( 1.0, 1.0, 1.0 );
	new_survived.hidewheninmenu = true;
	if ( player isSplitScreen() )
	{
		new_survived.fontScale = 1.5;
		new_survived.y += 40;
	}

	survived.y -= 999; //Hide the one we don't want, shame on Treyarch for not allowing a clean override.
	
	new_survived setText("You survived " + daysTxt + hoursTxt + minsTxt + secondsTxt);
	new_survived FadeOverTime(1);
	new_survived.alpha = 1;

	thread destory_game_over_hud(new_survived);
}

function destory_game_over_hud(hud)
{
	wait( level.zombie_vars["zombie_intermission_time"] );
	hud Destroy();
}

// Buyable Ending GSC File: --------------------------------------------------------------------------------------------------------------------------------

/*
	Created by Andy King (treminaor) for UGX-Mods.com. Â© UGX-Mods 2016
	Please include credit if you use this script and do not distribute edited versions of it without my permission.

	Instructions: https://confluence.ugx-mods.com/display/UGXMODS/BO3+%7C+Adding+Buyable+Ending+to+Zombiemode

	Version 1.0 10/15/2016 12:55PM
*/


#using scripts\shared\flag_shared;
#using scripts\zm\_zm_score;

#define ENDGAME_WAIT_FOR_FLAG			"" //if you want the ending to require a flag to be set from another script you have, enter the flag here.
#define ENDGAME_WAIT_FOR_NOTIFY			"" //if you want the ending to require a level notify to be sent from another script you have, enter the notify string here.
#define ENDGAME_COST					45666 //how much should it cost to end the game?
#define ENDGAME_CUSTOM_GAME_OVER 		"You Win!" //Do you want to replace the "GAME OVER" text? Set it here. If you want the default game over text from zombies, set this to blank.
#define ENDGAME_CUSTOM_TRIGGER_HINT		"Press interact to end the game!" //Customize the endgame trigger hintstring here. Cost will be appended automatically.

function autoexec endgame()
{
	if(ENDGAME_WAIT_FOR_NOTIFY != "")
		level.custom_game_over_hud_elem = &buyable_game_over;

	ending = getEnt("ending", "targetname");
	ending setCursorHint("HINT_NOICON");

	if(ENDGAME_WAIT_FOR_FLAG != "")
	{
		level flag::wait_till(ENDGAME_WAIT_FOR_FLAG);
	}
	else if(ENDGAME_WAIT_FOR_NOTIFY != "")
	{
		level waittill(ENDGAME_WAIT_FOR_NOTIFY);
	}
	else
	{
		ending setHintString(ENDGAME_CUSTOM_TRIGGER_HINT + " [Cost: " + ENDGAME_COST + "]");
	}

    while(1)
	{
		
		ending waittill("trigger", player);
		if(player.score < ENDGAME_COST)
		{
			wait 0.1;
			player playsound("zmb_no_cha_ching");
			continue;
		}
		player zm_score::minus_to_player_score(ENDGAME_COST); 
		player playsound("zmb_cha_ching");
		break;
	}

	level notify("end_game");
}

function buyable_game_over(player, game_over, survived)
{
	game_over.alignX = "center";
	game_over.alignY = "middle";
	game_over.horzAlign = "center";
	game_over.vertAlign = "middle";
	game_over.y -= 130;
	game_over.foreground = true;
	game_over.fontScale = 3;
	game_over.alpha = 0;
	game_over.color = ( 1.0, 1.0, 1.0 );
	game_over.hidewheninmenu = true;
	game_over SetText(ENDGAME_CUSTOM_GAME_OVER);

	game_over FadeOverTime( 1 );
	game_over.alpha = 1;
	if ( player isSplitScreen() )
	{
		game_over.fontScale = 2;
		game_over.y += 40;
	}
}
// Zone Config File: -----------------------------------------------------------------------------------------------------------------------------------------

{
	"Name" : "zm_towerofdemise",
	"GameMode" : "mpl",
	"IsCommon" : false,
	"Parent" : "",
	"Overlay" : "",
	"IsStandalone" : true,
	"IsProduction" : false,
	"IsShipped" : false,
	"DontDeploy" : false,
	"NoStreamBank" : false,
	"MapFile" : "",
	"Standalone" : true,
	"Builds" : [ "T7" ],
	"Sources" : [
	{
		"Type" : "ALIAS",
		"Name" : "user_aliases",
		"Filename" : "user_aliases.csv",
		"Specs" : [ ] 
	},
	{
		"Type" : "ALIAS",
		"Name" : "zm_ai_mangler",
		"Filename" : "zm_ai_mangler.csv",
		"Specs" : [ ] 
	},
	{
		"Type" : "AMBIENT",
		"Name" : "ambient_mod",
		"Filename" : "ambient_mod.csv",
		"Specs" : [ "mpl_mod" ]
	},
	{
		"Type" : "ALIAS",
		"Name" : "logical_perks",
		"Filename" : "logical_perks.csv",
		"Specs" : [ ] 
	},

]
}
// Zone File: -------------------------------------------------------------------------------------------------------------------------------------

>class,zm_mod_level
>group,modtools

xmodel,skybox_default_day
material,luts_t7_default

include,logical_perks

	
// BSP
col_map,maps/zm/zm_towerofdemise.d3dbsp
gfx_map,maps/zm/zm_towerofdemise.d3dbsp

// Audio
sound,zm_towerofdemise

scriptparsetree,scripts/zm/zm_towerofdemise.gsc
scriptparsetree,scripts/zm/zm_towerofdemise.csc

scriptparsetree,scripts/zm/ugxmods_timedgp.gsc

scriptparsetree,scripts/zm/ugxmods_buyable_ending.gsc

//SG4Y Flashlight FX
fx,sg4y/flashlight/flashlight_loop
fx,sg4y/flashlight/flashlight_loop_world
fx,sg4y/flashlight/flashlight_loop_view_moths
scriptparsetree,scripts/sg4y/flashlight/zm_flashlight.gsc
scriptparsetree,scripts/sg4y/flashlight/zm_flashlight.csc
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
